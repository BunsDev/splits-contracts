/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MirrorPublicationFactoryV1Interface extends ethers.utils.Interface {
  functions: {
    "createPublication(address,string,string,string,uint8)": FunctionFragment;
    "isInviteToken()": FunctionFragment;
    "mirrorInviteToken()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setInviteToken(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createPublication",
    values: [string, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isInviteToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mirrorInviteToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setInviteToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "createPublication",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInviteToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mirrorInviteToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInviteToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "PublicationCreated(address,string,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PublicationCreated"): EventFragment;
}

export class MirrorPublicationFactoryV1 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MirrorPublicationFactoryV1Interface;

  functions: {
    createPublication(
      owner: string,
      label: string,
      tokenName: string,
      tokenSymbol: string,
      tokenDecimals: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createPublication(address,string,string,string,uint8)"(
      owner: string,
      label: string,
      tokenName: string,
      tokenSymbol: string,
      tokenDecimals: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isInviteToken(overrides?: CallOverrides): Promise<[boolean]>;

    "isInviteToken()"(overrides?: CallOverrides): Promise<[boolean]>;

    mirrorInviteToken(overrides?: CallOverrides): Promise<[string]>;

    "mirrorInviteToken()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setInviteToken(
      inviteToken_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setInviteToken(address)"(
      inviteToken_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  createPublication(
    owner: string,
    label: string,
    tokenName: string,
    tokenSymbol: string,
    tokenDecimals: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createPublication(address,string,string,string,uint8)"(
    owner: string,
    label: string,
    tokenName: string,
    tokenSymbol: string,
    tokenDecimals: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isInviteToken(overrides?: CallOverrides): Promise<boolean>;

  "isInviteToken()"(overrides?: CallOverrides): Promise<boolean>;

  mirrorInviteToken(overrides?: CallOverrides): Promise<string>;

  "mirrorInviteToken()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setInviteToken(
    inviteToken_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setInviteToken(address)"(
    inviteToken_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    createPublication(
      owner: string,
      label: string,
      tokenName: string,
      tokenSymbol: string,
      tokenDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "createPublication(address,string,string,string,uint8)"(
      owner: string,
      label: string,
      tokenName: string,
      tokenSymbol: string,
      tokenDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    isInviteToken(overrides?: CallOverrides): Promise<boolean>;

    "isInviteToken()"(overrides?: CallOverrides): Promise<boolean>;

    mirrorInviteToken(overrides?: CallOverrides): Promise<string>;

    "mirrorInviteToken()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setInviteToken(
      inviteToken_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setInviteToken(address)"(
      inviteToken_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    PublicationCreated(
      publication: null,
      label: null,
      owner: null
    ): EventFilter;
  };

  estimateGas: {
    createPublication(
      owner: string,
      label: string,
      tokenName: string,
      tokenSymbol: string,
      tokenDecimals: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createPublication(address,string,string,string,uint8)"(
      owner: string,
      label: string,
      tokenName: string,
      tokenSymbol: string,
      tokenDecimals: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isInviteToken(overrides?: CallOverrides): Promise<BigNumber>;

    "isInviteToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    mirrorInviteToken(overrides?: CallOverrides): Promise<BigNumber>;

    "mirrorInviteToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setInviteToken(
      inviteToken_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setInviteToken(address)"(
      inviteToken_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createPublication(
      owner: string,
      label: string,
      tokenName: string,
      tokenSymbol: string,
      tokenDecimals: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createPublication(address,string,string,string,uint8)"(
      owner: string,
      label: string,
      tokenName: string,
      tokenSymbol: string,
      tokenDecimals: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isInviteToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isInviteToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mirrorInviteToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "mirrorInviteToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setInviteToken(
      inviteToken_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setInviteToken(address)"(
      inviteToken_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
