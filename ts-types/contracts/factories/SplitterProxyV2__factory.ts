/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, BytesLike } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { SplitterProxyV2 } from "../SplitterProxyV2";

export class SplitterProxyV2__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    splitter_: string,
    wethAddress_: string,
    merkleRoot_: BytesLike,
    overrides?: Overrides
  ): Promise<SplitterProxyV2> {
    return super.deploy(
      splitter_,
      wethAddress_,
      merkleRoot_,
      overrides || {}
    ) as Promise<SplitterProxyV2>;
  }
  getDeployTransaction(
    splitter_: string,
    wethAddress_: string,
    merkleRoot_: BytesLike,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(
      splitter_,
      wethAddress_,
      merkleRoot_,
      overrides || {}
    );
  }
  attach(address: string): SplitterProxyV2 {
    return super.attach(address) as SplitterProxyV2;
  }
  connect(signer: Signer): SplitterProxyV2__factory {
    return super.connect(signer) as SplitterProxyV2__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SplitterProxyV2 {
    return new Contract(address, _abi, signerOrProvider) as SplitterProxyV2;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "splitter_",
        type: "address",
      },
      {
        internalType: "address",
        name: "wethAddress_",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "merkleRoot_",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "currentWindow",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "merkleRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "splitter",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "wethAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161024638038061024683398101604081905261002f91610083565b600080546001600160a01b039485166001600160a01b03199182161790915560028054939094169216919091179091556001556100be565b80516001600160a01b038116811461007e57600080fd5b919050565b600080600060608486031215610097578283fd5b6100a084610067565b92506100ae60208501610067565b9150604084015190509250925092565b610179806100cd6000396000f3fe6080604052600436106100435760003560e01c80632eb4a7ab1461008b5780633cd8045e146100b45780634f0e0ef314610100578063ba0bafb41461012d5761004a565b3661004a57005b6000805473ffffffffffffffffffffffffffffffffffffffff16905060405136600082376000803683855af43d806000843e818015610087578184f35b8184fd5b34801561009757600080fd5b506100a160015481565b6040519081526020015b60405180910390f35b3480156100c057600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100ab565b34801561010c57600080fd5b506002546100db9073ffffffffffffffffffffffffffffffffffffffff1681565b34801561013957600080fd5b506100a16003548156fea2646970667358221220a632049cf502989b79af906d05a47f571a10d69999d8fb0d446f05d258816d0264736f6c63430008030033";
