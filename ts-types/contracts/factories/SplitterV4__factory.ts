/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { SplitterV4 } from "../SplitterV4";

export class SplitterV4__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<SplitterV4> {
    return super.deploy(overrides || {}) as Promise<SplitterV4>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SplitterV4 {
    return super.attach(address) as SplitterV4;
  }
  connect(signer: Signer): SplitterV4__factory {
    return super.connect(signer) as SplitterV4__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SplitterV4 {
    return new Contract(address, _abi, signerOrProvider) as SplitterV4;
  }
}

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "percent",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    name: "TransferETH",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "percent",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    name: "TransferToken",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint32",
        name: "percent",
        type: "uint32",
      },
    ],
    name: "amountFromPercent",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "window",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "percentageAllocation",
        type: "uint256",
      },
      {
        internalType: "bytes32[]",
        name: "merkleProof",
        type: "bytes32[]",
      },
    ],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "window",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getClaimHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "incrementWindow",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "window",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "isClaimed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "merkleRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "splitter",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "wethAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506108b4806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80635d4df3bf1161005b5780635d4df3bf146101185780637965ff9b1461012b578063f364c90c1461013e578063f8930fcd1461019c57610088565b80632eb4a7ab1461008d578063338b1d31146100a95780633cd8045e146100b35780634f0e0ef3146100f8575b600080fd5b61009660015481565b6040519081526020015b60405180910390f35b6100b16101d6565b005b6000546100d39073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100a0565b6002546100d39073ffffffffffffffffffffffffffffffffffffffff1681565b6100b16101263660046106f1565b610242565b6100966101393660046107a8565b610527565b61018c61014c3660046106d0565b6040805160208082019490945280820192909252805180830382018152606090920181528151918301919091206000908152600590925290205460ff1690565b60405190151581526020016100a0565b6100966101aa3660046106d0565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b6101ed60016003546101e89190610836565b61054c565b6101f79047610836565b60046003548154811061021a57634e487b7160e01b600052603260045260246000fd5b906000526020600020018190555060016003600082825461023b91906107df565b9091555050565b85600354118061025b57508515801561025b5750600354155b6102ac5760405162461bcd60e51b815260206004820181905260248201527f63616e6e6f7420636c61696d20666f722061206675747572652077696e646f7760448201526064015b60405180910390fd5b6040805160208082018990528183018890528251808303840181526060909201835281519181019190912060009081526005909152205460ff16156103595760405162461bcd60e51b815260206004820152602860248201527f4163636f756e7420616c726561647920636c61696d656420746865206769766560448201527f6e2077696e646f7700000000000000000000000000000000000000000000000060648201526084016102a3565b60408051602080820189905281830188905282518083038401815260609092018352815191810191909120600090815260059091522080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905560408051602081018790527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606087901b16918101919091526054810184905260009060740160405160208183030381529060405280519060200120905061045783838080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050600154915084905061059c565b6104a35760405162461bcd60e51b815260206004820152600d60248201527f496e76616c69642070726f6f660000000000000000000000000000000000000060448201526064016102a3565b60006064856104b18a61054c565b6104bb9190610817565b6104c591906107f7565b90506104d18682610659565b61051d5760405162461bcd60e51b815260206004820152600f60248201527f5472616e73666572206661696c6564000000000000000000000000000000000060448201526064016102a3565b5050505050505050565b6000606461053b63ffffffff841685610817565b61054591906107f7565b9392505050565b60008115801561055c5750600354155b15610568575047610597565b6004828154811061058957634e487b7160e01b600052603260045260246000fd5b906000526020600020015490505b919050565b600081815b855181101561064e5760008682815181106105cc57634e487b7160e01b600052603260045260246000fd5b6020026020010151905080831161060e57604080516020810185905290810182905260600160405160208183030381529060405280519060200120925061063b565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b50806106468161084d565b9150506105a1565b509092149392505050565b600061054583836000808373ffffffffffffffffffffffffffffffffffffffff168361753090604051600060405180830381858888f193505050503d80600081146106c0576040519150601f19603f3d011682016040523d82523d6000602084013e6106c5565b606091505b509095945050505050565b600080604083850312156106e2578182fd5b50508035926020909101359150565b60008060008060008060a08789031215610709578182fd5b8635955060208701359450604087013573ffffffffffffffffffffffffffffffffffffffff8116811461073a578283fd5b935060608701359250608087013567ffffffffffffffff8082111561075d578384fd5b818901915089601f830112610770578384fd5b81358181111561077e578485fd5b8a60208260051b8501011115610792578485fd5b6020830194508093505050509295509295509295565b600080604083850312156107ba578182fd5b82359150602083013563ffffffff811681146107d4578182fd5b809150509250929050565b600082198211156107f2576107f2610868565b500190565b60008261081257634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561083157610831610868565b500290565b60008282101561084857610848610868565b500390565b600060001982141561086157610861610868565b5060010190565b634e487b7160e01b600052601160045260246000fdfea26469706673582212204028820c1bbe35fb84074e04e31ba8f55df4dab6aab5f7485ae006f98bfd7b7364736f6c63430008030033";
