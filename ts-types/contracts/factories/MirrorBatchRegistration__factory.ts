/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { MirrorBatchRegistration } from "../MirrorBatchRegistration";

export class MirrorBatchRegistration__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    token_: string,
    overrides?: Overrides
  ): Promise<MirrorBatchRegistration> {
    return super.deploy(
      token_,
      overrides || {}
    ) as Promise<MirrorBatchRegistration>;
  }
  getDeployTransaction(
    token_: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(token_, overrides || {});
  }
  attach(address: string): MirrorBatchRegistration {
    return super.attach(address) as MirrorBatchRegistration;
  }
  connect(signer: Signer): MirrorBatchRegistration__factory {
    return super.connect(signer) as MirrorBatchRegistration__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MirrorBatchRegistration {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MirrorBatchRegistration;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "token_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "string[]",
        name: "labels",
        type: "string[]",
      },
      {
        internalType: "address[]",
        name: "owners",
        type: "address[]",
      },
    ],
    name: "registerBatch",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161076638038061076683398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610082565b600060208284031215610065578081fd5b81516001600160a01b038116811461007b578182fd5b9392505050565b6106d5806100916000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80633c1b1c6e14610030575b600080fd5b61004361003e366004610441565b610045565b005b60008054604080517fdc4a7f7f00000000000000000000000000000000000000000000000000000000815290518693926100fe92859273ffffffffffffffffffffffffffffffffffffffff9092169163dc4a7f7f91600480820192602092909190829003018186803b1580156100ba57600080fd5b505afa1580156100ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100f291906104ca565b9063ffffffff61036616565b6000546040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152919250829173ffffffffffffffffffffffffffffffffffffffff9091169063dd62ed3e9061015b90339030906004016104e2565b60206040518083038186803b15801561017357600080fd5b505afa158015610187573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ab91906104ca565b10156101ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101e3906105dd565b60405180910390fd5b6000546040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd9061024690339030908690600401610509565b602060405180830381600087803b15801561026057600080fd5b505af1158015610274573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029891906104aa565b5060005b8281101561035d5760005473ffffffffffffffffffffffffffffffffffffffff16631e59c5298888848181106102ce57fe5b90506020028101906102e0919061063a565b8888868181106102ec57fe5b90506020020160208101906103019190610406565b6040518463ffffffff1660e01b815260040161031f9392919061053a565b600060405180830381600087803b15801561033957600080fd5b505af115801561034d573d6000803e3d6000fd5b50506001909201915061029c9050565b50505050505050565b60008115806103815750508082028282828161037e57fe5b04145b6103b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101e3906105a6565b92915050565b60008083601f8401126103ce578182fd5b50813567ffffffffffffffff8111156103e5578182fd5b60208301915083602080830285010111156103ff57600080fd5b9250929050565b600060208284031215610417578081fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461043a578182fd5b9392505050565b60008060008060408587031215610456578283fd5b843567ffffffffffffffff8082111561046d578485fd5b610479888389016103bd565b90965094506020870135915080821115610491578384fd5b5061049e878288016103bd565b95989497509550505050565b6000602082840312156104bb578081fd5b8151801515811461043a578182fd5b6000602082840312156104db578081fd5b5051919050565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b60006040825283604083015283856060840137806060858401015260607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f860116830101905073ffffffffffffffffffffffffffffffffffffffff83166020830152949350505050565b60208082526014908201527f64732d6d6174682d6d756c2d6f766572666c6f77000000000000000000000000604082015260600190565b60208082526036908201527f4d6972726f724261746368526567697374726174696f6e3a206e65656420746f60408201527f206772616e7420746f6b656e20616c6c6f77616e636500000000000000000000606082015260800190565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261066e578283fd5b8084018035925067ffffffffffffffff831115610689578384fd5b602001925050368190038213156103ff57600080fdfea264697066735822122053ef296748d2f572a14817971e600dee24850e659ebfcdcd45cedd54be2c452864736f6c63430006080033";
