/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { MirrorBatchRegistration } from "../MirrorBatchRegistration";

export class MirrorBatchRegistration__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    token_: string,
    overrides?: Overrides
  ): Promise<MirrorBatchRegistration> {
    return super.deploy(
      token_,
      overrides || {}
    ) as Promise<MirrorBatchRegistration>;
  }
  getDeployTransaction(
    token_: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(token_, overrides || {});
  }
  attach(address: string): MirrorBatchRegistration {
    return super.attach(address) as MirrorBatchRegistration;
  }
  connect(signer: Signer): MirrorBatchRegistration__factory {
    return super.connect(signer) as MirrorBatchRegistration__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MirrorBatchRegistration {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MirrorBatchRegistration;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "token_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "string[]",
        name: "labels",
        type: "string[]",
      },
      {
        internalType: "address[]",
        name: "owners",
        type: "address[]",
      },
    ],
    name: "registerBatch",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516106c83803806106c883398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610082565b600060208284031215610065578081fd5b81516001600160a01b038116811461007b578182fd5b9392505050565b610637806100916000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80633c1b1c6e14610030575b600080fd5b61004361003e3660046103a3565b610045565b005b826000610060670de0b6b3a76400008363ffffffff6102c816565b6000546040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152919250829173ffffffffffffffffffffffffffffffffffffffff9091169063dd62ed3e906100bd9033903090600401610444565b60206040518083038186803b1580156100d557600080fd5b505afa1580156100e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061010d919061042c565b101561014e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101459061053f565b60405180910390fd5b6000546040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd906101a89033903090869060040161046b565b602060405180830381600087803b1580156101c257600080fd5b505af11580156101d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101fa919061040c565b5060005b828110156102bf5760005473ffffffffffffffffffffffffffffffffffffffff16631e59c52988888481811061023057fe5b9050602002810190610242919061059c565b88888681811061024e57fe5b90506020020160208101906102639190610368565b6040518463ffffffff1660e01b81526004016102819392919061049c565b600060405180830381600087803b15801561029b57600080fd5b505af11580156102af573d6000803e3d6000fd5b5050600190920191506101fe9050565b50505050505050565b60008115806102e3575050808202828282816102e057fe5b04145b610319576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161014590610508565b92915050565b60008083601f840112610330578182fd5b50813567ffffffffffffffff811115610347578182fd5b602083019150836020808302850101111561036157600080fd5b9250929050565b600060208284031215610379578081fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461039c578182fd5b9392505050565b600080600080604085870312156103b8578283fd5b843567ffffffffffffffff808211156103cf578485fd5b6103db8883890161031f565b909650945060208701359150808211156103f3578384fd5b506104008782880161031f565b95989497509550505050565b60006020828403121561041d578081fd5b8151801515811461039c578182fd5b60006020828403121561043d578081fd5b5051919050565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b60006040825283604083015283856060840137806060858401015260607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f860116830101905073ffffffffffffffffffffffffffffffffffffffff83166020830152949350505050565b60208082526014908201527f64732d6d6174682d6d756c2d6f766572666c6f77000000000000000000000000604082015260600190565b60208082526036908201527f4d6972726f724261746368526567697374726174696f6e3a206e65656420746f60408201527f206772616e7420746f6b656e20616c6c6f77616e636500000000000000000000606082015260800190565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126105d0578283fd5b8084018035925067ffffffffffffffff8311156105eb578384fd5b6020019250503681900382131561036157600080fdfea2646970667358221220aa26a7bda97e298f333ac9eb7a3e1ae1ad4d54d117db26d76b3d3b4417a27c2564736f6c63430006080033";
