/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IMirrorENSRegistrarInterface extends ethers.utils.Interface {
  functions: {
    "changeRootNodeOwner(address)": FunctionFragment;
    "register(string,address)": FunctionFragment;
    "updateENSReverseRegistrar()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "changeRootNodeOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateENSReverseRegistrar",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "changeRootNodeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateENSReverseRegistrar",
    data: BytesLike
  ): Result;

  events: {};
}

export class IMirrorENSRegistrar extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IMirrorENSRegistrarInterface;

  functions: {
    changeRootNodeOwner(
      newOwner_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changeRootNodeOwner(address)"(
      newOwner_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    register(
      label_: string,
      owner_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "register(string,address)"(
      label_: string,
      owner_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateENSReverseRegistrar(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateENSReverseRegistrar()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  changeRootNodeOwner(
    newOwner_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "changeRootNodeOwner(address)"(
    newOwner_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  register(
    label_: string,
    owner_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "register(string,address)"(
    label_: string,
    owner_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateENSReverseRegistrar(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateENSReverseRegistrar()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    changeRootNodeOwner(
      newOwner_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "changeRootNodeOwner(address)"(
      newOwner_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    register(
      label_: string,
      owner_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "register(string,address)"(
      label_: string,
      owner_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateENSReverseRegistrar(overrides?: CallOverrides): Promise<void>;

    "updateENSReverseRegistrar()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    changeRootNodeOwner(
      newOwner_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "changeRootNodeOwner(address)"(
      newOwner_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    register(
      label_: string,
      owner_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "register(string,address)"(
      label_: string,
      owner_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateENSReverseRegistrar(overrides?: Overrides): Promise<BigNumber>;

    "updateENSReverseRegistrar()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    changeRootNodeOwner(
      newOwner_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changeRootNodeOwner(address)"(
      newOwner_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    register(
      label_: string,
      owner_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "register(string,address)"(
      label_: string,
      owner_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateENSReverseRegistrar(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateENSReverseRegistrar()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
