/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IENSReverseRegistrarInterface extends ethers.utils.Interface {
  functions: {
    "claim(address)": FunctionFragment;
    "claimWithResolver(address,address)": FunctionFragment;
    "node(address)": FunctionFragment;
    "setName(string)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "claim", values: [string]): string;
  encodeFunctionData(
    functionFragment: "claimWithResolver",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "node", values: [string]): string;
  encodeFunctionData(functionFragment: "setName", values: [string]): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimWithResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "node", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setName", data: BytesLike): Result;

  events: {};
}

export class IENSReverseRegistrar extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IENSReverseRegistrarInterface;

  functions: {
    claim(_owner: string, overrides?: Overrides): Promise<ContractTransaction>;

    "claim(address)"(
      _owner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claimWithResolver(
      _owner: string,
      _resolver: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimWithResolver(address,address)"(
      _owner: string,
      _resolver: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    node(_addr: string, overrides?: CallOverrides): Promise<[string]>;

    "node(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setName(_name: string, overrides?: Overrides): Promise<ContractTransaction>;

    "setName(string)"(
      _name: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  claim(_owner: string, overrides?: Overrides): Promise<ContractTransaction>;

  "claim(address)"(
    _owner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claimWithResolver(
    _owner: string,
    _resolver: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimWithResolver(address,address)"(
    _owner: string,
    _resolver: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  node(_addr: string, overrides?: CallOverrides): Promise<string>;

  "node(address)"(_addr: string, overrides?: CallOverrides): Promise<string>;

  setName(_name: string, overrides?: Overrides): Promise<ContractTransaction>;

  "setName(string)"(
    _name: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    claim(_owner: string, overrides?: CallOverrides): Promise<string>;

    "claim(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<string>;

    claimWithResolver(
      _owner: string,
      _resolver: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "claimWithResolver(address,address)"(
      _owner: string,
      _resolver: string,
      overrides?: CallOverrides
    ): Promise<string>;

    node(_addr: string, overrides?: CallOverrides): Promise<string>;

    "node(address)"(_addr: string, overrides?: CallOverrides): Promise<string>;

    setName(_name: string, overrides?: CallOverrides): Promise<string>;

    "setName(string)"(
      _name: string,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    claim(_owner: string, overrides?: Overrides): Promise<BigNumber>;

    "claim(address)"(_owner: string, overrides?: Overrides): Promise<BigNumber>;

    claimWithResolver(
      _owner: string,
      _resolver: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claimWithResolver(address,address)"(
      _owner: string,
      _resolver: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    node(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    "node(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setName(_name: string, overrides?: Overrides): Promise<BigNumber>;

    "setName(string)"(_name: string, overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    claim(_owner: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "claim(address)"(
      _owner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claimWithResolver(
      _owner: string,
      _resolver: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimWithResolver(address,address)"(
      _owner: string,
      _resolver: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    node(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "node(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setName(
      _name: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setName(string)"(
      _name: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
