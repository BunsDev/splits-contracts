// //SPDX-License-Identifier: GPL-3.0-or-later
// pragma solidity ^0.7.0;

// /**
//  * A sketch of the Mirror Publication interface (currently for the purpose of
//  * high-level discussion). 
//  *
//  * Proof-of-concept code has been written to support these ideas.
//  *
//  * tl;dr: A Mirror Publication is a DAO of writers and administrators. It 
//  * can mint its own tokens and interact with other protocols. It is upgradable
//  * and only storage is deployed per publication.
//  */
// interface IMirrorPublicationV1 {
//     /*
//         Interface for Initialization
//     */

//     // Initializing instantiates the creator as an admin contributor, and returns a Contributor ID.
//     // Can only be performed by the Mirror Publication Factory.
//     function initialize(
//         // Contributor Configuration
//         address payable creator, 
//         // ERC20 Configuration
//         string tokenName, 
//         string tokenSymbol,
//         uint8 decimals
//     ) external returns (uint contributorID);

//     // Returns the address of the "Mirror Publication Factory",
//     // which has the ability to create and initialize a MirrorPublication.
//     function factory() external view returns (address);


//     /*
//         Contributor Administration Interface
//     */
    
//     // A Publication contains multiple contributors.
// 	struct Contributor {
//         // Contributors are associated with Ethereum accounts (e.g. an EOA or multisig)
//         // that allows them to be paid, or execute transactions.
//         address payable account;
//         // Each contributor has a role such as "writer" or "admin".
//         Role role;
//         // Admins can disable contributor accounts if they are no longer
//         // associated with the publication.
//         bool enabled;
//     }

//     // A list of roles for contributors to take.
//     enum Role {
//         ADMIN,
//         WRITER
//     }

//     function addContributor(address payable account, Role role) external onlyRole(Role.ADMIN) returns (uint contributorID);
//     function disableContributor(uint contributorID) external onlyRole(Role.ADMIN);

//     /*
//         ERC20 Interface
//         A Mirror Publication can mint tokens 
//     */

//     event Approval(address indexed owner, address indexed spender, uint value);
//     event Transfer(address indexed from, address indexed to, uint value);

//     function name() external view returns (string memory);
//     function symbol() external view returns (string memory);
//     function decimals() external view returns (uint8);
//     function totalSupply() external view returns (uint);
//     function balanceOf(address owner) external view returns (uint);
//     function allowance(address owner, address spender) external view returns (uint);

//     function approve(address spender, uint value) external returns (bool);
//     function transfer(address to, uint value) external returns (bool);
//     function transferFrom(address from, address to, uint value) external returns (bool);
//     function mint(address to) external returns (uint liquidity);

//     /*
//         Generic Interactions, sketch (needs nonces, etc.)
        
//         This can be used for generic actions (such as treasury management) as long as its signed by
//         the correct contributor role (uses ec_recover and ECDSA signatures).

//         This brings some complexity to the frontend interactions, rather than the contract
//         interface. In any case, the contract will be upgradable.
//     */

//     function executeAction(
//         address to,
//         bytes calldata data,
//         uint256 minimumActionGas,
//         bytes calldata adminSignature,
//     ) external returns (bool ok, bytes memory returnData);

//     function executeActionWithAtomicBatchCalls(
//         Call[] calldata calls,
//         uint256 minimumActionGas,
//         bytes calldata adminSignature,
//     ) external returns (bool[] memory ok, bytes[] memory returnData);
// }